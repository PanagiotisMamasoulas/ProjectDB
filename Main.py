from PyQt5 import QtCore, QtGui, QtWidgets
import sys
import mysql.connector
import datetime
import functools
import operator

lusername = None
lpassword = None
username = None
password = None
name = None
surname = None
reg_date = None
email = None
exp_years = None
firm = None
jid = None
JID = []
CID = []
FID = []
announce_date = None
title = None
edra = None
salary = None
start_date = None
submission_date = None
antikeim = None
fname = None
fafm = None
fdoy = None
ftel = None
fstreet = None
fnum = None
fcity = None
fcountry = None
lock = True
root = False
userstate = None
new = None

mydb = mysql.connector.connect(host="localhost", user="root", password='1998!Hello@There!1998', database="erecruit", charset="utf8", use_unicode=True)
# mydcursor = mydb.cursor()
# mydcursor.execute("SET NAMES 'utf8'")
# mydcursor.execute("SET CHARACTER SET 'utf8'")

class mainWindow(object):
    def setupLogin(self, LoginScreen):
        LoginScreen.setObjectName("LoginScreen")
        LoginScreen.resize(650, 350)
        LoginScreen.setMinimumSize(QtCore.QSize(200, 200))
        LoginScreen.setMaximumSize(QtCore.QSize(16777215, 16777215))
        LoginScreen.setToolButtonStyle(QtCore.Qt.ToolButtonIconOnly)
        LoginScreen.setTabShape(QtWidgets.QTabWidget.Rounded)
        LoginScreen.setUnifiedTitleAndToolBarOnMac(False)
        self.centralwidget = QtWidgets.QWidget(LoginScreen)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem, 7, 1, 1, 2)
        self.password = QtWidgets.QLineEdit(self.centralwidget)
        self.password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.password.setObjectName("password")
        self.gridLayout.addWidget(self.password, 2, 1, 1, 2)
        self.remember = QtWidgets.QCheckBox(self.centralwidget)
        self.remember.setObjectName("remember")
        self.gridLayout.addWidget(self.remember, 3, 1, 1, 2)
        self.autom = QtWidgets.QCheckBox(self.centralwidget)
        self.autom.setObjectName("autom")
        self.gridLayout.addWidget(self.autom, 4, 1, 1, 2)
        self.warning = QtWidgets.QLabel(self.centralwidget)
        self.warning.setEnabled(True)
        self.warning.setLineWidth(0)
        self.warning.setTextFormat(QtCore.Qt.RichText)
        self.warning.setScaledContents(False)
        self.warning.setAlignment(QtCore.Qt.AlignCenter)
        self.warning.setWordWrap(False)
        self.warning.setIndent(0)
        self.warning.setObjectName("warning")
        self.gridLayout.addWidget(self.warning, 5, 1, 1, 2)
        self.username = QtWidgets.QLineEdit(self.centralwidget)
        self.username.setObjectName("username")
        self.gridLayout.addWidget(self.username, 1, 1, 1, 2)
        self.login = QtWidgets.QPushButton(self.centralwidget)
        self.login.setObjectName("login")
        self.gridLayout.addWidget(self.login, 6, 1, 1, 1)
        self.exit = QtWidgets.QPushButton(self.centralwidget)
        self.exit.setObjectName("exit")
        self.gridLayout.addWidget(self.exit, 6, 2, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem1, 1, 3, 6, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout.addItem(spacerItem2, 0, 1, 1, 2)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem3, 1, 0, 6, 1)
        LoginScreen.setCentralWidget(self.centralwidget)

        self.retranslateLoginUi(LoginScreen)
        QtCore.QMetaObject.connectSlotsByName(LoginScreen)
        LoginScreen.setTabOrder(self.username, self.password)
        LoginScreen.setTabOrder(self.password, self.remember)
        LoginScreen.setTabOrder(self.remember, self.autom)
        LoginScreen.setTabOrder(self.autom, self.login)
        LoginScreen.setTabOrder(self.login, self.exit)

        # QtCore.QObject.QShortcut.setKey(Key_Enter).activated.connect(self.login.clicked)
        self.login.clicked.connect(self.Login)
        self.exit.clicked.connect(quit)
        # QtCore.QEvent.QInputEvent.QKeyPressed()

    def retranslateLoginUi(self, LoginScreen):
        _translate = QtCore.QCoreApplication.translate
        LoginScreen.setWindowTitle(_translate("LoginScreen", "Login"))
        self.warning.setText(_translate("LoginScreen", "<html><head/><body><p></p></body></html>"))
        self.login.setText(_translate("LoginScreen", "Log in"))
        self.username.setPlaceholderText(_translate("LoginScreen", "Username"))
        self.exit.setText(_translate("LoginScreen", "Exit"))
        self.remember.setText(_translate("LoginScreen", "Remember me"))
        self.autom.setText(_translate("LoginScreen", "Log in automaricaly"))
        self.password.setPlaceholderText(_translate("LoginScreen", "Password"))

    def Login(self):
        global userstate, username, password, mydb
        credentials = mydb.cursor(buffered=True)
        lusername = self.username.text()
        credentials.execute("SELECT EXISTS(SELECT * FROM user WHERE username = (%s))", (lusername,))
        case = functools.reduce(operator.add, (credentials.fetchone()))
        if case == 1:
            lpassword = self.password.text()
            credentials.execute("SELECT password FROM user WHERE username = (%s)", (lusername,))
            att = credentials.fetchone()
            if att:
                passw = functools.reduce(operator.add, (att))
                if passw == lpassword:
                    username = lusername
                    password = lpassword
                    self.username.clear()
                    self.password.clear()
                    credentials.execute("SELECT EXISTS(SELECT * FROM admin WHERE username = (%s))", (lusername,))
                    direct = functools.reduce(operator.add, (credentials.fetchone()))
                    if direct == 1:
                        userstate = 1
                        ui.setupAdmin(MainWindow)
                    else:
                        credentials.execute("SELECT EXISTS(SELECT username FROM recruiter WHERE username = (%s))", (lusername,))
                        direct = functools.reduce(operator.add, (credentials.fetchone()))
                        if direct == 1:
                            userstate = 2
                            ui.setupRecruit(MainWindow)
                        else:
                            credentials.execute("SELECT EXISTS(SELECT username FROM candidate WHERE username = (%s))", (lusername,))
                            direct = functools.reduce(operator.add, (credentials.fetchone()))
                            if direct == 1:
                                userstate = 3
                                ui.setupCandidate(MainWindow)
                            else:
                                print("WTF??????")
                else:
                    self.warning.setText("<html><head/><body><p><span style=\" color:#ff0000;\">Wrong password</span></p></body></html>")
                    print("Pass = ", passw)
            else:
                self.warning.setText("<html><head/><body><p><span style=\" color:#ff0000;\">Error</span></p></body></html>")
                sys.exit('Error with database, please advice your system administrator')
        else:
            self.warning.setText("<html><head/><body><p><span style=\" color:#ff0000;\">Wrong username</span></p></body></html>")
        # else:
        #     self.warning.setText("<html><head/><body><p><span style=\" color:#ff0000;\">Error</span></p></body></html>")

    def setupRecruit(self, RecruitWindow):
        RecruitWindow.setObjectName("RecruitWindow")
        RecruitWindow.resize(650, 350)
        RecruitWindow.setMinimumSize(QtCore.QSize(650, 350))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        RecruitWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(RecruitWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.Reset = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Reset.sizePolicy().hasHeightForWidth())
        self.Reset.setSizePolicy(sizePolicy)
        self.Reset.setObjectName("Reset")
        self.gridLayout.addWidget(self.Reset, 2, 3, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 2, 1, 1, 1)
        self.Save = QtWidgets.QPushButton(self.centralwidget)
        self.Save.setObjectName("Save")
        self.gridLayout.addWidget(self.Save, 2, 2, 1, 1)
        self.Exit = QtWidgets.QPushButton(self.centralwidget)
        self.Exit.setObjectName("Exit")
        self.gridLayout.addWidget(self.Exit, 2, 0, 1, 1)
        self.Tabs = QtWidgets.QTabWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Tabs.sizePolicy().hasHeightForWidth())
        self.Tabs.setSizePolicy(sizePolicy)
        self.Tabs.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setBold(False)
        font.setWeight(50)
        self.Tabs.setFont(font)
        self.Tabs.setTabPosition(QtWidgets.QTabWidget.North)
        self.Tabs.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.Tabs.setIconSize(QtCore.QSize(16, 16))
        self.Tabs.setElideMode(QtCore.Qt.ElideNone)
        self.Tabs.setUsesScrollButtons(False)
        self.Tabs.setDocumentMode(False)
        self.Tabs.setTabsClosable(False)
        self.Tabs.setTabBarAutoHide(False)
        self.Tabs.setObjectName("Tabs")
        self.ACCOUNT = QtWidgets.QWidget()
        self.ACCOUNT.setObjectName("ACCOUNT")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.ACCOUNT)
        self.gridLayout_2.setContentsMargins(10, 10, 10, 10)
        self.gridLayout_2.setSpacing(5)
        self.gridLayout_2.setObjectName("gridLayout_2")
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_2.addItem(spacerItem1, 3, 0, 1, 4)
        self._email = QtWidgets.QLabel(self.ACCOUNT)
        self._email.setObjectName("_email")
        self.gridLayout_2.addWidget(self._email, 2, 2, 1, 1)
        self._regdate = QtWidgets.QLabel(self.ACCOUNT)
        self._regdate.setObjectName("_regdate")
        self.gridLayout_2.addWidget(self._regdate, 2, 0, 1, 1)
        self.Email = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Email.setObjectName("Email")
        self.gridLayout_2.addWidget(self.Email, 2, 3, 1, 1)
        self.Regdate = QtWidgets.QDateTimeEdit(self.ACCOUNT)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Regdate.sizePolicy().hasHeightForWidth())
        self.Regdate.setSizePolicy(sizePolicy)
        self.Regdate.setFrame(True)
        self.Regdate.setReadOnly(False)
        self.Regdate.setButtonSymbols(QtWidgets.QAbstractSpinBox.PlusMinus)
        self.Regdate.setProperty("showGroupSeparator", False)
        self.Regdate.setDisplayFormat("dd-MM-yyyy HH:mm:ss")
        self.Regdate.setObjectName("Regdate")
        self.gridLayout_2.addWidget(self.Regdate, 2, 1, 1, 1)
        self.Username = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Username.setEnabled(True)
        self.Username.setReadOnly(True)
        self.Username.setObjectName("Username")
        self.gridLayout_2.addWidget(self.Username, 0, 1, 1, 1)
        self._password = QtWidgets.QLabel(self.ACCOUNT)
        self._password.setObjectName("_password")
        self.gridLayout_2.addWidget(self._password, 0, 2, 1, 1)
        self.Name = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Name.setObjectName("Name")
        self.gridLayout_2.addWidget(self.Name, 1, 1, 1, 1)
        self.Password = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.Password.setObjectName("Password")
        self.gridLayout_2.addWidget(self.Password, 0, 3, 1, 1)
        self._surname = QtWidgets.QLabel(self.ACCOUNT)
        self._surname.setObjectName("_surname")
        self.gridLayout_2.addWidget(self._surname, 1, 2, 1, 1)
        self._name = QtWidgets.QLabel(self.ACCOUNT)
        self._name.setObjectName("_name")
        self.gridLayout_2.addWidget(self._name, 1, 0, 1, 1)
        self.Surname = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Surname.setObjectName("Surname")
        self.gridLayout_2.addWidget(self.Surname, 1, 3, 1, 1)
        self._username = QtWidgets.QLabel(self.ACCOUNT)
        self._username.setObjectName("_username")
        self.gridLayout_2.addWidget(self._username, 0, 0, 1, 1)
        self.Tabs.addTab(self.ACCOUNT, "")
        self.WORKPOS = QtWidgets.QWidget()
        self.WORKPOS.setObjectName("WORKPOS")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.WORKPOS)
        self.gridLayout_3.setContentsMargins(10, 10, 10, 10)
        self.gridLayout_3.setSpacing(5)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.J_position = QtWidgets.QLabel(self.WORKPOS)
        self.J_position.setObjectName("J_position")
        self.gridLayout_3.addWidget(self.J_position, 2, 0, 1, 1)
        self.JSalary = QtWidgets.QSpinBox(self.WORKPOS)
        self.JSalary.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.JSalary.setMaximum(1000000000)
        self.JSalary.setObjectName("JSalary")
        self.gridLayout_3.addWidget(self.JSalary, 5, 1, 1, 1)
        self.J_recruiter = QtWidgets.QLabel(self.WORKPOS)
        self.J_recruiter.setObjectName("J_recruiter")
        self.gridLayout_3.addWidget(self.J_recruiter, 2, 3, 1, 1)
        self.JTitle = QtWidgets.QLineEdit(self.WORKPOS)
        self.JTitle.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.JTitle.setObjectName("JTitle")
        self.gridLayout_3.addWidget(self.JTitle, 2, 1, 1, 1)
        self.J_salary = QtWidgets.QLabel(self.WORKPOS)
        self.J_salary.setObjectName("J_salary")
        self.gridLayout_3.addWidget(self.J_salary, 5, 0, 1, 1)
        self.JRecruiter = QtWidgets.QLineEdit(self.WORKPOS)
        self.JRecruiter.setReadOnly(True)
        self.JRecruiter.setObjectName("JRecruiter")
        self.gridLayout_3.addWidget(self.JRecruiter, 2, 4, 1, 1)
        self.J_subdate = QtWidgets.QLabel(self.WORKPOS)
        self.J_subdate.setObjectName("J_subdate")
        self.gridLayout_3.addWidget(self.J_subdate, 5, 3, 1, 1)
        self.J_startdate = QtWidgets.QLabel(self.WORKPOS)
        self.J_startdate.setObjectName("J_startdate")
        self.gridLayout_3.addWidget(self.J_startdate, 6, 0, 1, 1)
        self._antikeim = QtWidgets.QLabel(self.WORKPOS)
        self._antikeim.setObjectName("_antikeim")
        self.gridLayout_3.addWidget(self._antikeim, 6, 3, 1, 1)
        self.JStartdate = QtWidgets.QDateEdit(self.WORKPOS)
        self.JStartdate.setDisplayFormat("dd-MM-yyyy")
        self.JStartdate.setObjectName("JStartdate")
        self.gridLayout_3.addWidget(self.JStartdate, 6, 1, 1, 1)
        self.JAnndate = QtWidgets.QDateTimeEdit(self.WORKPOS)
        self.JAnndate.setReadOnly(True)
        self.JAnndate.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.JAnndate.setDisplayFormat("dd-MM-yyyy HH:mm:ss")
        self.JAnndate.setObjectName("JAnndate")
        self.gridLayout_3.addWidget(self.JAnndate, 4, 1, 1, 1)
        self.J_edra = QtWidgets.QLabel(self.WORKPOS)
        self.J_edra.setObjectName("J_edra")
        self.gridLayout_3.addWidget(self.J_edra, 4, 3, 1, 1)
        self.JEdra = QtWidgets.QLineEdit(self.WORKPOS)
        self.JEdra.setObjectName("JEdra")
        self.gridLayout_3.addWidget(self.JEdra, 4, 4, 1, 1)
        self.J_anndate = QtWidgets.QLabel(self.WORKPOS)
        self.J_anndate.setObjectName("J_anndate")
        self.gridLayout_3.addWidget(self.J_anndate, 4, 0, 1, 1)
        self._idpos = QtWidgets.QLabel(self.WORKPOS)
        self._idpos.setObjectName("_idpos")
        self.gridLayout_3.addWidget(self._idpos, 1, 0, 1, 3)
        self.J_state = QtWidgets.QLabel(self.WORKPOS)
        self.J_state.setStatusTip("")
        self.J_state.setText("<html><head/><body><p><br/></p></body></html>")
        self.J_state.setObjectName("J_state")
        self.gridLayout_3.addWidget(self.J_state, 7, 0, 1, 1)
        self.JIDPos = QtWidgets.QComboBox(self.WORKPOS)
        self.JIDPos.setObjectName("JIDPos")
        self.gridLayout_3.addWidget(self.JIDPos, 1, 3, 1, 2)
        self.JSubdate = QtWidgets.QDateEdit(self.WORKPOS)
        self.JSubdate.setDisplayFormat("dd-MM-yyyy")
        self.JSubdate.setObjectName("JSubdate")
        self.gridLayout_3.addWidget(self.JSubdate, 5, 4, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_3.addItem(spacerItem2, 8, 0, 1, 4)
        self.JAntikeim = QtWidgets.QListWidget(self.WORKPOS)
        self.JAntikeim.setObjectName("JAntikeim")
        self.gridLayout_3.addWidget(self.JAntikeim, 6, 4, 3, 1)
        self.Tabs.addTab(self.WORKPOS, "")
        self.FIRM = QtWidgets.QWidget()
        self.FIRM.setObjectName("FIRM")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.FIRM)
        self.gridLayout_4.setContentsMargins(10, 10, 10, 10)
        self.gridLayout_4.setSpacing(5)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.EName = QtWidgets.QLineEdit(self.FIRM)
        self.EName.setEnabled(True)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.EName.sizePolicy().hasHeightForWidth())
        self.EName.setSizePolicy(sizePolicy)
        self.EName.setReadOnly(True)
        self.EName.setObjectName("EName")
        self.gridLayout_4.addWidget(self.EName, 0, 1, 1, 3)
        self.E_adress = QtWidgets.QLabel(self.FIRM)
        self.E_adress.setObjectName("E_adress")
        self.gridLayout_4.addWidget(self.E_adress, 3, 0, 1, 1)
        self.ETel = QtWidgets.QDoubleSpinBox(self.FIRM)
        self.ETel.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.ETel.setDecimals(0)
        self.ETel.setMaximum(99999999999.0)
        self.ETel.setObjectName("ETel")
        self.gridLayout_4.addWidget(self.ETel, 2, 6, 1, 1)
        self.ERoad = QtWidgets.QLineEdit(self.FIRM)
        self.ERoad.setObjectName("ERoad")
        self.gridLayout_4.addWidget(self.ERoad, 3, 1, 1, 1)
        spacerItem3 = QtWidgets.QSpacerItem(20, 178, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_4.addItem(spacerItem3, 4, 2, 1, 2)
        self.E_tel = QtWidgets.QLabel(self.FIRM)
        self.E_tel.setObjectName("E_tel")
        self.gridLayout_4.addWidget(self.E_tel, 2, 4, 1, 1)
        self.ECity = QtWidgets.QLineEdit(self.FIRM)
        self.ECity.setObjectName("ECity")
        self.gridLayout_4.addWidget(self.ECity, 3, 3, 1, 3)
        self.E_name = QtWidgets.QLabel(self.FIRM)
        self.E_name.setObjectName("E_name")
        self.gridLayout_4.addWidget(self.E_name, 0, 0, 1, 1)
        self.ECountry = QtWidgets.QLineEdit(self.FIRM)
        self.ECountry.setObjectName("ECountry")
        self.gridLayout_4.addWidget(self.ECountry, 3, 6, 1, 1)
        self.EDoy = QtWidgets.QLineEdit(self.FIRM)
        self.EDoy.setReadOnly(True)
        self.EDoy.setObjectName("EDoy")
        self.gridLayout_4.addWidget(self.EDoy, 2, 1, 1, 3)
        self.EAFM = QtWidgets.QSpinBox(self.FIRM)
        self.EAFM.setReadOnly(True)
        self.EAFM.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.EAFM.setMaximum(1000000000)
        self.EAFM.setObjectName("EAFM")
        self.gridLayout_4.addWidget(self.EAFM, 0, 6, 1, 1)
        self.E_doy = QtWidgets.QLabel(self.FIRM)
        self.E_doy.setObjectName("E_doy")
        self.gridLayout_4.addWidget(self.E_doy, 2, 0, 1, 1)
        self.E_afm = QtWidgets.QLabel(self.FIRM)
        self.E_afm.setObjectName("E_afm")
        self.gridLayout_4.addWidget(self.E_afm, 0, 4, 1, 1)
        self.ENum = QtWidgets.QSpinBox(self.FIRM)
        self.ENum.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.ENum.setMaximum(99999999)
        self.ENum.setObjectName("ENum")
        self.gridLayout_4.addWidget(self.ENum, 3, 2, 1, 1)
        self.Tabs.addTab(self.FIRM, "")
        self.gridLayout.addWidget(self.Tabs, 0, 0, 1, 4)
        RecruitWindow.setCentralWidget(self.centralwidget)
        self._email.setBuddy(self.Email)
        self._regdate.setBuddy(self.Regdate)
        self._password.setBuddy(self.Password)
        self._surname.setBuddy(self.Surname)
        self._name.setBuddy(self.Name)
        self._username.setBuddy(self.Username)
        self.J_position.setBuddy(self.JTitle)
        self.J_recruiter.setBuddy(self.JRecruiter)
        self.J_salary.setBuddy(self.JSalary)
        self.J_subdate.setBuddy(self.JSubdate)
        self.J_startdate.setBuddy(self.JStartdate)
        self._antikeim.setBuddy(self.JAntikeim)
        self.J_edra.setBuddy(self.JEdra)
        self.J_anndate.setBuddy(self.JAnndate)
        self._idpos.setBuddy(self.JIDPos)
        self.E_adress.setBuddy(self.ERoad)
        self.E_tel.setBuddy(self.ETel)
        self.E_name.setBuddy(self.EName)
        self.E_doy.setBuddy(self.EDoy)
        self.E_afm.setBuddy(self.EAFM)

        self.retranslateRecruitUi(RecruitWindow)
        self.Tabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(RecruitWindow)
        RecruitWindow.setTabOrder(self.Tabs, self.Username)
        RecruitWindow.setTabOrder(self.Username, self.Password)
        RecruitWindow.setTabOrder(self.Password, self.Name)
        RecruitWindow.setTabOrder(self.Name, self.Surname)
        RecruitWindow.setTabOrder(self.Surname, self.Regdate)
        RecruitWindow.setTabOrder(self.Regdate, self.Email)
        RecruitWindow.setTabOrder(self.Email, self.JIDPos)
        RecruitWindow.setTabOrder(self.JIDPos, self.JTitle)
        RecruitWindow.setTabOrder(self.JTitle, self.JRecruiter)
        RecruitWindow.setTabOrder(self.JRecruiter, self.JAnndate)
        RecruitWindow.setTabOrder(self.JAnndate, self.JEdra)
        RecruitWindow.setTabOrder(self.JEdra, self.JSalary)
        RecruitWindow.setTabOrder(self.JSalary, self.JSubdate)
        RecruitWindow.setTabOrder(self.JSubdate, self.JStartdate)
        RecruitWindow.setTabOrder(self.JStartdate, self.JAntikeim)
        RecruitWindow.setTabOrder(self.JAntikeim, self.EName)
        RecruitWindow.setTabOrder(self.EName, self.EAFM)
        RecruitWindow.setTabOrder(self.EAFM, self.EDoy)
        RecruitWindow.setTabOrder(self.EDoy, self.ETel)
        RecruitWindow.setTabOrder(self.ETel, self.ERoad)
        RecruitWindow.setTabOrder(self.ERoad, self.ENum)
        RecruitWindow.setTabOrder(self.ENum, self.ECity)
        RecruitWindow.setTabOrder(self.ECity, self.ECountry)
        RecruitWindow.setTabOrder(self.ECountry, self.Reset)
        RecruitWindow.setTabOrder(self.Reset, self.Save)
        RecruitWindow.setTabOrder(self.Save, self.Exit)

        self.init()

        self.Save.clicked.connect(self.saveAll)
        self.Reset.clicked.connect(self.resetAll)
        self.Exit.clicked.connect(self.logOut)
        # self.JIDPos.currentIndexChanged.connect(self.test)
        self.JIDPos.currentIndexChanged.connect(self.Conditions)

    def retranslateRecruitUi(self, RecruitWindow):
        _translate = QtCore.QCoreApplication.translate
        RecruitWindow.setWindowTitle(_translate("RecruitWindow", "MainWindow"))
        self.Reset.setText(_translate("RecruitWindow", "Reset"))
        self.Save.setText(_translate("RecruitWindow", "Save"))
        self.Exit.setText(_translate("RecruitWindow", "Log out"))
        self._email.setText(_translate("RecruitWindow", "E-Mail"))
        self._regdate.setText(_translate("RecruitWindow", "Register date"))
        self._password.setText(_translate("RecruitWindow", "Password"))
        self._surname.setText(_translate("RecruitWindow", "Surname"))
        self._name.setText(_translate("RecruitWindow", "Name"))
        self._username.setText(_translate("RecruitWindow", "Username"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.ACCOUNT), _translate("RecruitWindow", "My Account"))
        self.J_position.setText(_translate("RecruitWindow", "Title"))
        self.J_recruiter.setText(_translate("RecruitWindow", "Recruiter"))
        self.J_salary.setText(_translate("RecruitWindow", "Salary"))
        self.J_subdate.setText(_translate("RecruitWindow", "Expiration of applications date"))
        self.J_startdate.setText(_translate("RecruitWindow", "Starting Date"))
        self._antikeim.setText(_translate("RecruitWindow", "Subjects"))
        self.J_edra.setText(_translate("RecruitWindow", "Headquarters"))
        self.J_anndate.setText(_translate("RecruitWindow", "Posting date"))
        self._idpos.setText(_translate("RecruitWindow", "Choose job to edit:"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.WORKPOS), _translate("RecruitWindow", "Jobs"))
        self.E_adress.setText(_translate("RecruitWindow", "Adress"))
        self.ERoad.setPlaceholderText(_translate("RecruitWindow", "Street"))
        self.E_tel.setText(_translate("RecruitWindow", "Phone"))
        self.ECity.setPlaceholderText(_translate("RecruitWindow", "City"))
        self.E_name.setText(_translate("RecruitWindow", "Brand"))
        self.ECountry.setPlaceholderText(_translate("RecruitWindow", "Country"))
        self.E_doy.setText(_translate("RecruitWindow", "DOY"))
        self.E_afm.setText(_translate("RecruitWindow", "AFM"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.FIRM), _translate("RecruitWindow", "Firm"))

    def setupCandidate(self, CandidateWindow):
        CandidateWindow.setObjectName("CandidateWindow")
        CandidateWindow.resize(650, 350)
        CandidateWindow.setMinimumSize(QtCore.QSize(650, 350))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        CandidateWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(CandidateWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 2, 1, 1, 1)
        self.Exit = QtWidgets.QPushButton(self.centralwidget)
        self.Exit.setObjectName("Exit")
        self.gridLayout.addWidget(self.Exit, 2, 0, 1, 1)
        self.Reset = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Reset.sizePolicy().hasHeightForWidth())
        self.Reset.setSizePolicy(sizePolicy)
        self.Reset.setObjectName("Reset")
        self.gridLayout.addWidget(self.Reset, 2, 3, 1, 1)
        self.Save = QtWidgets.QPushButton(self.centralwidget)
        self.Save.setObjectName("Save")
        self.gridLayout.addWidget(self.Save, 2, 2, 1, 1)
        self.Tabs = QtWidgets.QTabWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Tabs.sizePolicy().hasHeightForWidth())
        self.Tabs.setSizePolicy(sizePolicy)
        self.Tabs.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setBold(False)
        font.setWeight(50)
        self.Tabs.setFont(font)
        self.Tabs.setTabPosition(QtWidgets.QTabWidget.North)
        self.Tabs.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.Tabs.setIconSize(QtCore.QSize(16, 16))
        self.Tabs.setElideMode(QtCore.Qt.ElideNone)
        self.Tabs.setUsesScrollButtons(False)
        self.Tabs.setDocumentMode(False)
        self.Tabs.setTabsClosable(False)
        self.Tabs.setTabBarAutoHide(False)
        self.Tabs.setObjectName("Tabs")
        self.ACCOUNT = QtWidgets.QWidget()
        self.ACCOUNT.setObjectName("ACCOUNT")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.ACCOUNT)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self._username = QtWidgets.QLabel(self.ACCOUNT)
        self._username.setObjectName("_username")
        self.gridLayout_2.addWidget(self._username, 0, 0, 1, 1)
        self.Username = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Username.setEnabled(True)
        self.Username.setReadOnly(True)
        self.Username.setObjectName("Username")
        self.gridLayout_2.addWidget(self.Username, 0, 1, 1, 1)
        self._password = QtWidgets.QLabel(self.ACCOUNT)
        self._password.setObjectName("_password")
        self.gridLayout_2.addWidget(self._password, 0, 2, 1, 1)
        self.Password = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Password.setEchoMode(QtWidgets.QLineEdit.Password)
        self.Password.setObjectName("Password")
        self.gridLayout_2.addWidget(self.Password, 0, 3, 1, 1)
        self._name = QtWidgets.QLabel(self.ACCOUNT)
        self._name.setObjectName("_name")
        self.gridLayout_2.addWidget(self._name, 1, 0, 1, 1)
        self.Name = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Name.setObjectName("Name")
        self.gridLayout_2.addWidget(self.Name, 1, 1, 1, 1)
        self._surname = QtWidgets.QLabel(self.ACCOUNT)
        self._surname.setObjectName("_surname")
        self.gridLayout_2.addWidget(self._surname, 1, 2, 1, 1)
        self.Surname = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Surname.setObjectName("Surname")
        self.gridLayout_2.addWidget(self.Surname, 1, 3, 1, 1)
        self._regdate = QtWidgets.QLabel(self.ACCOUNT)
        self._regdate.setObjectName("_regdate")
        self.gridLayout_2.addWidget(self._regdate, 2, 0, 1, 1)
        self.Regdate = QtWidgets.QDateTimeEdit(self.ACCOUNT)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Regdate.sizePolicy().hasHeightForWidth())
        self.Regdate.setSizePolicy(sizePolicy)
        self.Regdate.setFrame(True)
        self.Regdate.setReadOnly(False)
        self.Regdate.setButtonSymbols(QtWidgets.QAbstractSpinBox.PlusMinus)
        self.Regdate.setProperty("showGroupSeparator", False)
        self.Regdate.setDisplayFormat("dd-MM-yyyy HH:mm:ss")
        self.Regdate.setObjectName("Regdate")
        self.gridLayout_2.addWidget(self.Regdate, 2, 1, 1, 1)
        self._email = QtWidgets.QLabel(self.ACCOUNT)
        self._email.setObjectName("_email")
        self.gridLayout_2.addWidget(self._email, 2, 2, 1, 1)
        self.Email = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Email.setObjectName("Email")
        self.gridLayout_2.addWidget(self.Email, 2, 3, 1, 1)
        self._recommendations = QtWidgets.QLabel(self.ACCOUNT)
        self._recommendations.setObjectName("_recommendations")
        self.gridLayout_2.addWidget(self._recommendations, 3, 0, 1, 1)
        self.Recommendations = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Recommendations.setObjectName("Recommendations")
        self.gridLayout_2.addWidget(self.Recommendations, 3, 1, 1, 1)
        self._certificates = QtWidgets.QLabel(self.ACCOUNT)
        self._certificates.setObjectName("_certificates")
        self.gridLayout_2.addWidget(self._certificates, 3, 2, 1, 1)
        self.Certificates = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Certificates.setObjectName("Certificates")
        self.gridLayout_2.addWidget(self.Certificates, 3, 3, 1, 1)
        self.C_biography = QtWidgets.QLabel(self.ACCOUNT)
        self.C_biography.setObjectName("C_biography")
        self.gridLayout_2.addWidget(self.C_biography, 4, 0, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_2.addItem(spacerItem1, 5, 0, 1, 1)
        self.CBiography = QtWidgets.QPlainTextEdit(self.ACCOUNT)
        self.CBiography.setReadOnly(True)
        self.CBiography.setObjectName("CBiography")
        self.gridLayout_2.addWidget(self.CBiography, 4, 1, 2, 3)
        self.Tabs.addTab(self.ACCOUNT, "")
        self.WORKPOS = QtWidgets.QWidget()
        self.WORKPOS.setObjectName("WORKPOS")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.WORKPOS)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.C_idpos = QtWidgets.QLabel(self.WORKPOS)
        self.C_idpos.setObjectName("C_idpos")
        self.gridLayout_3.addWidget(self.C_idpos, 0, 0, 1, 2)
        self.CTitle = QtWidgets.QLineEdit(self.WORKPOS)
        self.CTitle.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.CTitle.setReadOnly(True)
        self.CTitle.setObjectName("CTitle")
        self.gridLayout_3.addWidget(self.CTitle, 1, 1, 1, 1)
        self.C_recruiter = QtWidgets.QLabel(self.WORKPOS)
        self.C_recruiter.setObjectName("C_recruiter")
        self.gridLayout_3.addWidget(self.C_recruiter, 1, 2, 1, 1)
        self.C_position = QtWidgets.QLabel(self.WORKPOS)
        self.C_position.setObjectName("C_position")
        self.gridLayout_3.addWidget(self.C_position, 1, 0, 1, 1)
        self.CRecruiter = QtWidgets.QLineEdit(self.WORKPOS)
        self.CRecruiter.setReadOnly(True)
        self.CRecruiter.setObjectName("CRecruiter")
        self.gridLayout_3.addWidget(self.CRecruiter, 1, 3, 1, 1)
        self.C_edra = QtWidgets.QLabel(self.WORKPOS)
        self.C_edra.setObjectName("C_edra")
        self.gridLayout_3.addWidget(self.C_edra, 2, 0, 1, 1)
        self.C_subdate = QtWidgets.QLabel(self.WORKPOS)
        self.C_subdate.setObjectName("C_subdate")
        self.gridLayout_3.addWidget(self.C_subdate, 3, 2, 1, 1)
        self.CEdra = QtWidgets.QLineEdit(self.WORKPOS)
        self.CEdra.setReadOnly(True)
        self.CEdra.setObjectName("CEdra")
        self.gridLayout_3.addWidget(self.CEdra, 2, 1, 1, 1)
        self.C_salary = QtWidgets.QLabel(self.WORKPOS)
        self.C_salary.setObjectName("C_salary")
        self.gridLayout_3.addWidget(self.C_salary, 3, 0, 1, 1)
        self.CStartdate = QtWidgets.QDateEdit(self.WORKPOS)
        self.CStartdate.setReadOnly(True)
        self.CStartdate.setDisplayFormat("dd-MM-yyyy")
        self.CStartdate.setObjectName("CStartdate")
        self.gridLayout_3.addWidget(self.CStartdate, 2, 3, 1, 1)
        self.C_startdate = QtWidgets.QLabel(self.WORKPOS)
        self.C_startdate.setObjectName("C_startdate")
        self.gridLayout_3.addWidget(self.C_startdate, 2, 2, 1, 1)
        self.CAppFile = QtWidgets.QLineEdit(self.WORKPOS)
        self.CAppFile.setObjectName("CAppFile")
        self.gridLayout_3.addWidget(self.CAppFile, 4, 1, 1, 1)
        self.CSubdate = QtWidgets.QDateEdit(self.WORKPOS)
        self.CSubdate.setReadOnly(True)
        self.CSubdate.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.CSubdate.setDisplayFormat("dd-MM-yyyy")
        self.CSubdate.setObjectName("CSubdate")
        self.gridLayout_3.addWidget(self.CSubdate, 3, 3, 1, 1)
        self.C_appfile = QtWidgets.QLabel(self.WORKPOS)
        self.C_appfile.setObjectName("C_appfile")
        self.gridLayout_3.addWidget(self.C_appfile, 4, 0, 1, 1)
        self.CSalary = QtWidgets.QSpinBox(self.WORKPOS)
        self.CSalary.setReadOnly(True)
        self.CSalary.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.CSalary.setMaximum(1000000000)
        self.CSalary.setObjectName("CSalary")
        self.gridLayout_3.addWidget(self.CSalary, 3, 1, 1, 1)
        self.C_antikeim = QtWidgets.QLabel(self.WORKPOS)
        self.C_antikeim.setObjectName("C_antikeim")
        self.gridLayout_3.addWidget(self.C_antikeim, 4, 2, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_3.addItem(spacerItem2, 6, 0, 1, 3)
        self.C_state = QtWidgets.QLabel(self.WORKPOS)
        self.C_state.setStatusTip("")
        self.C_state.setText("<html><head/><body><p><br/></p></body></html>")
        self.C_state.setObjectName("C_state")
        self.gridLayout_3.addWidget(self.C_state, 5, 0, 1, 3)
        self.DeleteApp = QtWidgets.QPushButton(self.WORKPOS)
        self.DeleteApp.setObjectName("DeleteApp")
        self.gridLayout_3.addWidget(self.DeleteApp, 7, 0, 1, 1)
        self.CAntikeim = QtWidgets.QListWidget(self.WORKPOS)
        self.CAntikeim.setObjectName("CAntikeim")
        self.gridLayout_3.addWidget(self.CAntikeim, 4, 3, 4, 1)
        spacerItem3 = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout_3.addItem(spacerItem3, 7, 1, 1, 2)
        self.CIDPos = QtWidgets.QComboBox(self.WORKPOS)
        self.CIDPos.setObjectName("CIDPos")
        self.gridLayout_3.addWidget(self.CIDPos, 0, 2, 1, 2)
        self.Tabs.addTab(self.WORKPOS, "")
        self.gridLayout.addWidget(self.Tabs, 0, 0, 1, 4)
        CandidateWindow.setCentralWidget(self.centralwidget)
        self._username.setBuddy(self.Username)
        self._password.setBuddy(self.Password)
        self._name.setBuddy(self.Name)
        self._surname.setBuddy(self.Surname)
        self._regdate.setBuddy(self.Regdate)
        self._email.setBuddy(self.Email)
        self.C_idpos.setBuddy(self.CIDPos)
        self.C_recruiter.setBuddy(self.CRecruiter)
        self.C_position.setBuddy(self.CTitle)
        self.C_edra.setBuddy(self.CEdra)
        self.C_subdate.setBuddy(self.CSubdate)
        self.C_salary.setBuddy(self.CSalary)
        self.C_startdate.setBuddy(self.CStartdate)
        self.C_antikeim.setBuddy(self.CAntikeim)

        self.retranslateCandidateUi(CandidateWindow)
        self.Tabs.setCurrentIndex(0)
        QtCore.QMetaObject.connectSlotsByName(CandidateWindow)
        CandidateWindow.setTabOrder(self.Tabs, self.Username)
        CandidateWindow.setTabOrder(self.Username, self.Password)
        CandidateWindow.setTabOrder(self.Password, self.Name)
        CandidateWindow.setTabOrder(self.Name, self.Surname)
        CandidateWindow.setTabOrder(self.Surname, self.Regdate)
        CandidateWindow.setTabOrder(self.Regdate, self.Email)
        CandidateWindow.setTabOrder(self.Email, self.Recommendations)
        CandidateWindow.setTabOrder(self.Recommendations, self.Certificates)
        CandidateWindow.setTabOrder(self.Certificates, self.CBiography)
        CandidateWindow.setTabOrder(self.CBiography, self.CIDPos)
        CandidateWindow.setTabOrder(self.CIDPos, self.CTitle)
        CandidateWindow.setTabOrder(self.CTitle, self.CRecruiter)
        CandidateWindow.setTabOrder(self.CRecruiter, self.CEdra)
        CandidateWindow.setTabOrder(self.CEdra, self.CStartdate)
        CandidateWindow.setTabOrder(self.CStartdate, self.CSalary)
        CandidateWindow.setTabOrder(self.CSalary, self.CSubdate)
        CandidateWindow.setTabOrder(self.CSubdate, self.CAppFile)
        CandidateWindow.setTabOrder(self.CAppFile, self.CAntikeim)
        CandidateWindow.setTabOrder(self.CAntikeim, self.Reset)
        CandidateWindow.setTabOrder(self.Reset, self.Save)
        CandidateWindow.setTabOrder(self.Save, self.Exit)
        CandidateWindow.setTabOrder(self.Exit, self.DeleteApp)

        self.init()

        self.CIDPos.currentIndexChanged.connect(self.Conditions)
        self.Tabs.currentChanged.connect(self.saveButton)
        self.Save.clicked.connect(self.saveAll)
        self.Reset.clicked.connect(self.resetAll)
        self.DeleteApp.clicked.connect(self.delete)
        self.Exit.clicked.connect(self.logOut)

    def retranslateCandidateUi(self, CandidateWindow):
        _translate = QtCore.QCoreApplication.translate
        CandidateWindow.setWindowTitle(_translate("CandidateWindow", "MainWindow"))
        self.Exit.setText(_translate("CandidateWindow", "Log out"))
        self.Reset.setText(_translate("CandidateWindow", "Reset"))
        self.Save.setText(_translate("CandidateWindow", "Save"))
        self._username.setText(_translate("CandidateWindow", "Username"))
        self._password.setText(_translate("CandidateWindow", "Password"))
        self._name.setText(_translate("CandidateWindow", "Name"))
        self._surname.setText(_translate("CandidateWindow", "Surname"))
        self._regdate.setText(_translate("CandidateWindow", "Register date"))
        self._email.setText(_translate("CandidateWindow", "E-Mail"))
        self._recommendations.setText(_translate("CandidateWindow", "Recommendations"))
        self._certificates.setText(_translate("CandidateWindow", "Certificates"))
        self.C_biography.setText(_translate("CandidateWindow", "Biography"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.ACCOUNT), _translate("CandidateWindow", "My Account"))
        self.C_idpos.setText(_translate("CandidateWindow", "Choose job to apply:"))
        self.C_recruiter.setText(_translate("CandidateWindow", "Recruiter"))
        self.C_position.setText(_translate("CandidateWindow", "Title"))
        self.C_edra.setText(_translate("CandidateWindow", "Headquarters"))
        self.C_subdate.setText(_translate("CandidateWindow", "Expiration of applications date"))
        self.C_salary.setText(_translate("CandidateWindow", "Salary"))
        self.C_startdate.setText(_translate("CandidateWindow", "Starting Date"))
        self.C_appfile.setText(_translate("CandidateWindow", "Application File"))
        self.C_antikeim.setText(_translate("CandidateWindow", "Subjects"))
        self.DeleteApp.setText(_translate("CandidateWindow", "Delete"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.WORKPOS), _translate("CandidateWindow", "Applications"))

    def setupAdmin(self, AdminWindow):
        AdminWindow.setObjectName("AdminWindow")
        AdminWindow.resize(650, 350)
        AdminWindow.setMinimumSize(QtCore.QSize(650, 350))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        AdminWindow.setFont(font)
        self.centralwidget = QtWidgets.QWidget(AdminWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout.setObjectName("gridLayout")
        self.Save = QtWidgets.QPushButton(self.centralwidget)
        self.Save.setObjectName("Save")
        self.gridLayout.addWidget(self.Save, 2, 2, 1, 1)
        spacerItem = QtWidgets.QSpacerItem(40, 20, QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Minimum)
        self.gridLayout.addItem(spacerItem, 2, 1, 1, 1)
        self.Reset = QtWidgets.QPushButton(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Reset.sizePolicy().hasHeightForWidth())
        self.Reset.setSizePolicy(sizePolicy)
        self.Reset.setObjectName("Reset")
        self.gridLayout.addWidget(self.Reset, 2, 3, 1, 1)
        self.Exit = QtWidgets.QPushButton(self.centralwidget)
        self.Exit.setObjectName("Exit")
        self.gridLayout.addWidget(self.Exit, 2, 0, 1, 1)
        self.Tabs = QtWidgets.QTabWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Tabs.sizePolicy().hasHeightForWidth())
        self.Tabs.setSizePolicy(sizePolicy)
        self.Tabs.setMaximumSize(QtCore.QSize(16777215, 16777215))
        font = QtGui.QFont()
        font.setFamily("Bahnschrift Light")
        font.setBold(False)
        font.setWeight(50)
        self.Tabs.setFont(font)
        self.Tabs.setTabPosition(QtWidgets.QTabWidget.North)
        self.Tabs.setTabShape(QtWidgets.QTabWidget.Rounded)
        self.Tabs.setIconSize(QtCore.QSize(16, 16))
        self.Tabs.setElideMode(QtCore.Qt.ElideNone)
        self.Tabs.setUsesScrollButtons(False)
        self.Tabs.setDocumentMode(False)
        self.Tabs.setTabsClosable(False)
        self.Tabs.setTabBarAutoHide(False)
        self.Tabs.setObjectName("Tabs")
        self.ACCOUNT = QtWidgets.QWidget()
        self.ACCOUNT.setObjectName("ACCOUNT")
        self.gridLayout_5 = QtWidgets.QGridLayout(self.ACCOUNT)
        self.gridLayout_5.setObjectName("gridLayout_5")
        self._username = QtWidgets.QLabel(self.ACCOUNT)
        self._username.setObjectName("_username")
        self.gridLayout_5.addWidget(self._username, 0, 0, 1, 1)
        self.Username = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Username.setEnabled(True)
        self.Username.setReadOnly(True)
        self.Username.setObjectName("Username")
        self.gridLayout_5.addWidget(self.Username, 0, 1, 1, 1)
        self._password = QtWidgets.QLabel(self.ACCOUNT)
        self._password.setObjectName("_password")
        self.gridLayout_5.addWidget(self._password, 0, 2, 1, 1)
        self.Password = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Password.setEchoMode(QtWidgets.QLineEdit.PasswordEchoOnEdit)
        self.Password.setObjectName("Password")
        self.gridLayout_5.addWidget(self.Password, 0, 3, 1, 1)
        self._name = QtWidgets.QLabel(self.ACCOUNT)
        self._name.setObjectName("_name")
        self.gridLayout_5.addWidget(self._name, 1, 0, 1, 1)
        self.Name = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Name.setObjectName("Name")
        self.gridLayout_5.addWidget(self.Name, 1, 1, 1, 1)
        self._surname = QtWidgets.QLabel(self.ACCOUNT)
        self._surname.setObjectName("_surname")
        self.gridLayout_5.addWidget(self._surname, 1, 2, 1, 1)
        self.Surname = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Surname.setObjectName("Surname")
        self.gridLayout_5.addWidget(self.Surname, 1, 3, 1, 1)
        self._regdate = QtWidgets.QLabel(self.ACCOUNT)
        self._regdate.setObjectName("_regdate")
        self.gridLayout_5.addWidget(self._regdate, 2, 0, 1, 1)
        self.Regdate = QtWidgets.QDateTimeEdit(self.ACCOUNT)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.Regdate.sizePolicy().hasHeightForWidth())
        self.Regdate.setSizePolicy(sizePolicy)
        self.Regdate.setReadOnly(True)
        self.Regdate.setButtonSymbols(QtWidgets.QAbstractSpinBox.NoButtons)
        self.Regdate.setProperty("showGroupSeparator", False)
        self.Regdate.setDisplayFormat("dd-MM-yyyy HH:mm:ss")
        self.Regdate.setObjectName("Regdate")
        self.gridLayout_5.addWidget(self.Regdate, 2, 1, 1, 1)
        self._email = QtWidgets.QLabel(self.ACCOUNT)
        self._email.setObjectName("_email")
        self.gridLayout_5.addWidget(self._email, 2, 2, 1, 1)
        self.Email = QtWidgets.QLineEdit(self.ACCOUNT)
        self.Email.setObjectName("Email")
        self.gridLayout_5.addWidget(self.Email, 2, 3, 1, 1)
        self.stackedRC = QtWidgets.QStackedWidget(self.ACCOUNT)
        self.stackedRC.setObjectName("stackedRC")
        self.blank = QtWidgets.QWidget()
        self.blank.setObjectName("blank")
        self.stackedRC.addWidget(self.blank)
        self.stack_recruiter = QtWidgets.QWidget()
        self.stack_recruiter.setObjectName("stack_recruiter")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.stack_recruiter)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.R_expyears = QtWidgets.QLabel(self.stack_recruiter)
        self.R_expyears.setObjectName("R_expyears")
        self.gridLayout_2.addWidget(self.R_expyears, 0, 0, 1, 1)
        self.RExpYears = QtWidgets.QSpinBox(self.stack_recruiter)
        self.RExpYears.setObjectName("RExpYears")
        self.gridLayout_2.addWidget(self.RExpYears, 0, 1, 1, 1)
        self.Rfirm = QtWidgets.QLabel(self.stack_recruiter)
        self.Rfirm.setObjectName("Rfirm")
        self.gridLayout_2.addWidget(self.Rfirm, 0, 2, 1, 1)
        self.RFirm = QtWidgets.QComboBox(self.stack_recruiter)
        self.RFirm.setObjectName("RFirm")
        self.gridLayout_2.addWidget(self.RFirm, 0, 3, 1, 1)
        spacerItem1 = QtWidgets.QSpacerItem(20, 108, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_2.addItem(spacerItem1, 1, 2, 1, 1)
        self.stackedRC.addWidget(self.stack_recruiter)
        self.stack_candidate = QtWidgets.QWidget()
        self.stack_candidate.setObjectName("stack_candidate")
        self.gridLayout_6 = QtWidgets.QGridLayout(self.stack_candidate)
        self.gridLayout_6.setObjectName("gridLayout_6")
        self.CCertificates = QtWidgets.QLineEdit(self.stack_candidate)
        self.CCertificates.setObjectName("CCertificates")
        self.gridLayout_6.addWidget(self.CCertificates, 0, 3, 1, 1)
        self.C_biography = QtWidgets.QLabel(self.stack_candidate)
        self.C_biography.setObjectName("C_biography")
        self.gridLayout_6.addWidget(self.C_biography, 1, 0, 1, 1)
        self.CRecommendations = QtWidgets.QLineEdit(self.stack_candidate)
        self.CRecommendations.setObjectName("CRecommendations")
        self.gridLayout_6.addWidget(self.CRecommendations, 0, 1, 1, 1)
        self.C_certificates = QtWidgets.QLabel(self.stack_candidate)
        self.C_certificates.setObjectName("C_certificates")
        self.gridLayout_6.addWidget(self.C_certificates, 0, 2, 1, 1)
        spacerItem2 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_6.addItem(spacerItem2, 2, 0, 1, 1)
        self.CBiography = QtWidgets.QPlainTextEdit(self.stack_candidate)
        self.CBiography.setObjectName("CBiography")
        self.gridLayout_6.addWidget(self.CBiography, 1, 1, 2, 3)
        self.C_recommendations = QtWidgets.QLabel(self.stack_candidate)
        self.C_recommendations.setObjectName("C_recommendations")
        self.gridLayout_6.addWidget(self.C_recommendations, 0, 0, 1, 1)
        self.stackedRC.addWidget(self.stack_candidate)
        self.gridLayout_5.addWidget(self.stackedRC, 4, 0, 1, 4)
        self.RCChoose = QtWidgets.QComboBox(self.ACCOUNT)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.RCChoose.sizePolicy().hasHeightForWidth())
        self.RCChoose.setSizePolicy(sizePolicy)
        self.RCChoose.setObjectName("RCChoose")
        self.RCChoose.addItem("")
        self.RCChoose.addItem("")
        self.gridLayout_5.addWidget(self.RCChoose, 3, 1, 1, 1)
        self.RC_choose = QtWidgets.QLabel(self.ACCOUNT)
        self.RC_choose.setObjectName("RC_choose")
        self.gridLayout_5.addWidget(self.RC_choose, 3, 0, 1, 1)
        self.Tabs.addTab(self.ACCOUNT, "")
        self.WORKPOS = QtWidgets.QWidget()
        self.WORKPOS.setObjectName("WORKPOS")
        self.gridLayout_3 = QtWidgets.QGridLayout(self.WORKPOS)
        self.gridLayout_3.setObjectName("gridLayout_3")
        self.FS_choose = QtWidgets.QLabel(self.WORKPOS)
        self.FS_choose.setObjectName("FS_choose")
        self.gridLayout_3.addWidget(self.FS_choose, 0, 0, 1, 2)
        self.FSCHoose = QtWidgets.QComboBox(self.WORKPOS)
        self.FSCHoose.setObjectName("FSCHoose")
        self.FSCHoose.addItem("")
        self.FSCHoose.addItem("")
        self.gridLayout_3.addWidget(self.FSCHoose, 0, 2, 1, 1)
        self.FS_title = QtWidgets.QLabel(self.WORKPOS)
        self.FS_title.setObjectName("FS_title")
        self.gridLayout_3.addWidget(self.FS_title, 1, 0, 1, 1)
        self.FSTitle = QtWidgets.QLineEdit(self.WORKPOS)
        self.FSTitle.setLayoutDirection(QtCore.Qt.LeftToRight)
        self.FSTitle.setObjectName("FSTitle")
        self.gridLayout_3.addWidget(self.FSTitle, 1, 1, 1, 2)
        self.FS_belongs = QtWidgets.QLabel(self.WORKPOS)
        self.FS_belongs.setObjectName("FS_belongs")
        self.gridLayout_3.addWidget(self.FS_belongs, 1, 3, 1, 1)
        self.FSBelongs = QtWidgets.QComboBox(self.WORKPOS)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Expanding, QtWidgets.QSizePolicy.Fixed)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.FSBelongs.sizePolicy().hasHeightForWidth())
        self.FSBelongs.setSizePolicy(sizePolicy)
        self.FSBelongs.setObjectName("FSBelongs")
        self.gridLayout_3.addWidget(self.FSBelongs, 1, 4, 1, 1)
        self.FSRootcheck = QtWidgets.QCheckBox(self.WORKPOS)
        self.FSRootcheck.setObjectName("FSRootcheck")
        self.gridLayout_3.addWidget(self.FSRootcheck, 2, 4, 1, 1)
        self.FS_description = QtWidgets.QLabel(self.WORKPOS)
        self.FS_description.setObjectName("FS_description")
        self.gridLayout_3.addWidget(self.FS_description, 3, 0, 1, 1)
        self.FSDecription = QtWidgets.QTextEdit(self.WORKPOS)
        self.FSDecription.setObjectName("FSDecription")
        self.gridLayout_3.addWidget(self.FSDecription, 3, 1, 3, 4)
        spacerItem3 = QtWidgets.QSpacerItem(20, 40, QtWidgets.QSizePolicy.Minimum, QtWidgets.QSizePolicy.Expanding)
        self.gridLayout_3.addItem(spacerItem3, 4, 0, 1, 1)
        self.Tabs.addTab(self.WORKPOS, "")
        self.HISTORY = QtWidgets.QWidget()
        self.HISTORY.setObjectName("HISTORY")
        self.gridLayout_4 = QtWidgets.QGridLayout(self.HISTORY)
        self.gridLayout_4.setObjectName("gridLayout_4")
        self.HResults = QtWidgets.QTableWidget(self.HISTORY)
        self.HResults.setSizeAdjustPolicy(QtWidgets.QAbstractScrollArea.AdjustToContentsOnFirstShow)
        self.HResults.setAlternatingRowColors(True)
        self.HResults.setObjectName("HResults")
        self.HResults.setColumnCount(5)
        self.HResults.setRowCount(0)
        item = QtWidgets.QTableWidgetItem()
        self.HResults.setHorizontalHeaderItem(0, item)
        item = QtWidgets.QTableWidgetItem()
        self.HResults.setHorizontalHeaderItem(1, item)
        item = QtWidgets.QTableWidgetItem()
        self.HResults.setHorizontalHeaderItem(2, item)
        item = QtWidgets.QTableWidgetItem()
        self.HResults.setHorizontalHeaderItem(3, item)
        item = QtWidgets.QTableWidgetItem()
        self.HResults.setHorizontalHeaderItem(4, item)
        self.gridLayout_4.addWidget(self.HResults, 2, 0, 1, 3)
        self.HOrder2 = QtWidgets.QComboBox(self.HISTORY)
        self.HOrder2.setObjectName("HOrder2")
        self.gridLayout_4.addWidget(self.HOrder2, 0, 2, 1, 1)
        self.H_order = QtWidgets.QLabel(self.HISTORY)
        self.H_order.setObjectName("H_order")
        self.gridLayout_4.addWidget(self.H_order, 0, 0, 1, 1)
        self.HOrder = QtWidgets.QComboBox(self.HISTORY)
        self.HOrder.setCurrentText("")
        self.HOrder.setInsertPolicy(QtWidgets.QComboBox.NoInsert)
        self.HOrder.setObjectName("HOrder")
        self.HOrder.addItem("")
        self.HOrder.addItem("")
        self.gridLayout_4.addWidget(self.HOrder, 0, 1, 1, 1)
        self.H_timeperiod = QtWidgets.QLabel(self.HISTORY)
        self.H_timeperiod.setObjectName("H_timeperiod")
        self.gridLayout_4.addWidget(self.H_timeperiod, 1, 0, 1, 1)
        self.HTPStart = QtWidgets.QDateEdit(self.HISTORY)
        self.HTPStart.setObjectName("HTPStart")
        self.gridLayout_4.addWidget(self.HTPStart, 1, 1, 1, 1)
        self.HTPEnd = QtWidgets.QDateEdit(self.HISTORY)
        self.HTPEnd.setObjectName("HTPEnd")
        self.gridLayout_4.addWidget(self.HTPEnd, 1, 2, 1, 1)
        self.Tabs.addTab(self.HISTORY, "")
        self.gridLayout.addWidget(self.Tabs, 0, 0, 1, 4)
        AdminWindow.setCentralWidget(self.centralwidget)
        self._username.setBuddy(self.Username)
        self._password.setBuddy(self.Password)
        self._name.setBuddy(self.Name)
        self._surname.setBuddy(self.Surname)
        self._regdate.setBuddy(self.Regdate)
        self._email.setBuddy(self.Email)
        self.C_biography.setBuddy(self.CBiography)
        self.C_certificates.setBuddy(self.CCertificates)
        self.C_recommendations.setBuddy(self.CRecommendations)
        self.FS_title.setBuddy(self.FSTitle)

        self.retranslateAdminUi(AdminWindow)
        self.Tabs.setCurrentIndex(0)
        self.RCChoose.setCurrentIndex(-1)
        self.stackedRC.setCurrentIndex(-1)
        self.FSCHoose.setCurrentIndex(-1)
        self.HOrder.setCurrentIndex(-1)
        QtCore.QMetaObject.connectSlotsByName(AdminWindow)
        AdminWindow.setTabOrder(self.Tabs, self.Username)
        AdminWindow.setTabOrder(self.Username, self.Password)
        AdminWindow.setTabOrder(self.Password, self.Name)
        AdminWindow.setTabOrder(self.Name, self.Surname)
        AdminWindow.setTabOrder(self.Surname, self.Regdate)
        AdminWindow.setTabOrder(self.Regdate, self.Email)
        AdminWindow.setTabOrder(self.Email, self.RCChoose)
        AdminWindow.setTabOrder(self.RCChoose, self.RExpYears)
        AdminWindow.setTabOrder(self.RExpYears, self.RFirm)
        AdminWindow.setTabOrder(self.RFirm, self.CRecommendations)
        AdminWindow.setTabOrder(self.CRecommendations, self.CCertificates)
        AdminWindow.setTabOrder(self.CCertificates, self.CBiography)
        AdminWindow.setTabOrder(self.CBiography, self.FSCHoose)
        AdminWindow.setTabOrder(self.FSCHoose, self.FSTitle)
        AdminWindow.setTabOrder(self.FSTitle, self.FSBelongs)
        AdminWindow.setTabOrder(self.FSBelongs, self.FSRootcheck)
        AdminWindow.setTabOrder(self.FSRootcheck, self.FSDecription)
        AdminWindow.setTabOrder(self.FSDecription, self.HOrder)
        AdminWindow.setTabOrder(self.HOrder, self.HOrder2)
        AdminWindow.setTabOrder(self.HOrder2, self.HResults)
        AdminWindow.setTabOrder(self.HResults, self.Reset)
        AdminWindow.setTabOrder(self.Reset, self.Save)
        AdminWindow.setTabOrder(self.Save, self.Exit)

        self.init()

        self.Regdate.setDateTime(QtCore.QDateTime.currentDateTime())
        self.Tabs.currentChanged.connect(self.Buttons)
        self.Save.clicked.connect(self.saveAll)
        self.Reset.clicked.connect(self.resetAll)
        self.Exit.clicked.connect(self.logOut)
        self.RCChoose.currentIndexChanged.connect(self.updateRC)
        self.FSCHoose.currentIndexChanged.connect(self.updateFS)
        self.FSRootcheck.stateChanged.connect(self.checkRoot)
        self.HOrder.currentIndexChanged.connect(self.updateHistoryOrder)
        self.HOrder2.currentIndexChanged.connect(self.updateHistory)

    def retranslateAdminUi(self, AdminWindow):
        _translate = QtCore.QCoreApplication.translate
        AdminWindow.setWindowTitle(_translate("AdminWindow", "MainWindow"))
        self.Save.setText(_translate("AdminWindow", "Add"))
        self.Reset.setText(_translate("AdminWindow", "Clear"))
        self.Exit.setText(_translate("AdminWindow", "Log out"))
        self._username.setText(_translate("AdminWindow", "Username"))
        self._password.setText(_translate("AdminWindow", "Password"))
        self._name.setText(_translate("AdminWindow", "Name"))
        self._surname.setText(_translate("AdminWindow", "Surname"))
        self._regdate.setText(_translate("AdminWindow", "Register date"))
        self._email.setText(_translate("AdminWindow", "E-Mail"))
        self.R_expyears.setText(_translate("AdminWindow", "Years of Experience"))
        self.Rfirm.setText(_translate("AdminWindow", "Firm"))
        self.C_biography.setText(_translate("AdminWindow", "Biography"))
        self.C_certificates.setText(_translate("AdminWindow", "Certificates"))
        self.C_recommendations.setText(_translate("AdminWindow", "Reccomendations"))
        self.RCChoose.setItemText(0, _translate("AdminWindow", "Recruiter"))
        self.RCChoose.setItemText(1, _translate("AdminWindow", "Candidate"))
        self.RC_choose.setText(_translate("AdminWindow", "Choose type of user:"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.ACCOUNT), _translate("AdminWindow", "Add an Account"))
        self.FS_choose.setText(_translate("AdminWindow", "Choose what to add:"))
        self.FSCHoose.setItemText(0, _translate("AdminWindow", "Field"))
        self.FSCHoose.setItemText(1, _translate("AdminWindow", "Subject"))
        self.FS_title.setText(_translate("AdminWindow", "Title"))
        self.FS_belongs.setText(_translate("AdminWindow", "Belongs to:"))
        self.FSRootcheck.setText(_translate("AdminWindow", "Root Element"))
        self.FS_description.setText(_translate("AdminWindow", "Description"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.WORKPOS), _translate("AdminWindow", "Add a Field or Subject"))
        item = self.HResults.horizontalHeaderItem(0)
        item.setText(_translate("AdminWindow", "User"))
        item = self.HResults.horizontalHeaderItem(1)
        item.setText(_translate("AdminWindow", "Date"))
        item = self.HResults.horizontalHeaderItem(2)
        item.setText(_translate("AdminWindow", "Status"))
        item = self.HResults.horizontalHeaderItem(3)
        item.setText(_translate("AdminWindow", "Type"))
        item = self.HResults.horizontalHeaderItem(4)
        item.setText(_translate("AdminWindow", "Table Name"))
        self.H_order.setText(_translate("AdminWindow", "Order By:"))
        self.HOrder.setItemText(0, _translate("AdminWindow", "Table"))
        self.HOrder.setItemText(1, _translate("AdminWindow", "User"))
        self.H_timeperiod.setText(_translate("AdminWindow", "Time period"))
        self.HTPStart.setDisplayFormat(_translate("AdminWindow", "dd-MM-yyyy"))
        self.HTPEnd.setDisplayFormat(_translate("AdminWindow", "dd-MM-yyyy"))
        self.Tabs.setTabText(self.Tabs.indexOf(self.HISTORY), _translate("AdminWindow", "History"))

    def Conditions(self):
        if lock == False and userstate == 1:
            None
        elif lock == False and userstate == 2:
            self.updateJob()
        elif lock == False and userstate == 3:
            self.updateApp()

    def init(self):
        global lock
        lock = True
        if userstate == 1:
            self.Regdate.setDateTime(QtCore.QDateTime.currentDateTime())
        elif userstate == 2:
            global name, surname, reg_date, email, exp_years, firm
            # ACCOUNT
            incursor = mydb.cursor(buffered=True)
            self.Username.setText(username)
            self.Password.setText(password)
            incursor.execute("SELECT name, surname, reg_date, email FROM user WHERE username = (%s)", (username,))
            atts = incursor.fetchone()
            name = atts[0]
            self.Name.setText(name)
            surname = atts[1]
            self.Surname.setText(surname)
            reg_date = atts[2]
            reg_date = reg_date.strftime("%d-%m-%Y %H:%M:%S")
            reg_date = QtCore.QDateTime.fromString(reg_date, "dd-MM-yyyy hh:mm:ss")
            self.Regdate.setDateTime(reg_date)
            email = atts[3]
            self.Email.setText(email)
            #JOBS
            self.updateJobs()
            #FIRM
            self.updateFirm()
        elif userstate == 3:
            # ACCOUNT
            incursor = mydb.cursor(buffered=True)
            self.Username.setText(username)
            self.Password.setText(password)
            incursor.execute("SELECT name, surname, reg_date, email FROM user WHERE username = (%s)", (username,))
            atts = incursor.fetchone()
            name = atts[0]
            self.Name.setText(name)
            surname = atts[1]
            self.Surname.setText(surname)
            reg_date = atts[2]
            reg_date = reg_date.strftime("%d-%m-%Y %H:%M:%S")
            reg_date = QtCore.QDateTime.fromString(reg_date, "dd-MM-yyyy hh:mm:ss")
            self.Regdate.setDateTime(reg_date)
            email = atts[3]
            self.Email.setText(email)
            incursor.execute("SELECT sistatikes, certificates, bio FROM candidate WHERE username = (%s)", (username,))
            val = incursor.fetchone()
            self.Recommendations.setText(val[0])
            self.Certificates.setText(val[1])
            self.CBiography.setPlainText(val[2])
            # APPLICATIONS
            self.updateApps()
        lock = False

    def saveAll(self):
        global password, name, surname, reg_date, email, exp_years, firm, mydb, JID, lock
        lock = True
        scursor = mydb.cursor(buffered=True)
        scursor.execute("set @curUser = (%s)", (username,))
        if userstate == 1:
            None
        elif userstate == 2:
            if self.Tabs.currentIndex() == 0:
                password = self.Password.text()
                name = self.Name.text()
                surname = self.Surname.text()
                reg_date = self.Regdate.dateTime()
                reg_date = reg_date.toString("yyyy-MM-dd")
                email = self.Email.text()
                scursor.execute("UPDATE user SET password = %s, name = %s, surname = %s, reg_date = %s, email = %s WHERE username = (%s)", (password, name, surname, reg_date, email, username))
                mydb.commit()
            elif self.Tabs.currentIndex() == 1:
                strdate = self.JStartdate.dateTime()
                strdate = strdate.toString("yyyy-MM-dd")
                subdate = self.JSubdate.dateTime()
                subdate = subdate.toString("yyyy-MM-dd")
                adate = QtCore.QDateTime.currentDateTime()
                adate = adate.toString("yyyy-MM-dd")
                if self.JIDPos.currentIndex() == len(JID):
                    scursor.execute("""INSERT INTO job (start_date, salary, position, edra, recruiter, announce_date, submission_date) values (%s,%s,%s,%s,%s,%s,%s)""", (strdate, self.JSalary.value(), self.JTitle.text(), self.JEdra.text(), username, adate, subdate))
                else:
                    scursor.execute("UPDATE job SET start_date = %s, salary = %s, position = %s, edra = %s, submission_date = %s WHERE id = (%s)", (strdate, self.JSalary.value(), self.JTitle.text(), self.JEdra.text(), subdate, JID[self.JIDPos.currentIndex()]))
                antik = []
                print(self.JAntikeim.count())
                for x in range(self.JAntikeim.count()):
                    if self.JAntikeim.item(x).checkState() == 2:
                        antik.append(self.JAntikeim.item(x).text())
                if new == 0:
                    scursor.execute("DELETE FROM requires WHERE job_id = (%s)", (JID[self.JIDPos.currentIndex()],))
                    for x in antik:
                        scursor.execute("""INSERT INTO requires (job_id, antikeim_title) values (%s,%s)""", (JID[self.JIDPos.currentIndex()],x))
                elif new == 1:
                    scursor.execute("SELECT MAX(id) FROM job")
                    tempid = scursor.fetchone()
                    for x in antik:
                        scursor.execute("""INSERT INTO requires (job_id, antikeim_title) values (%s,%s)""", (tempid[0],x))
                mydb.commit()
            elif self.Tabs.currentIndex() == 2:
                ftel = self.ETel.value()
                fstreet = self.ERoad.text()
                fnum = self.ENum.value()
                fcity = self.ECity.text()
                fcountry = self.ECountry.text()
                scursor.execute("UPDATE etaireia SET tel = %s, street = %s, num = %s, city = %s, country = %s WHERE etaireia.AFM = (%s)", (ftel, fstreet, fnum, fcity, fcountry, fafm))
                mydb.commit()
            JID.clear()
            self.JIDPos.clear()
            self.updateFirm()
            self.updateJobs()
        elif userstate == 3:
            if self.Tabs.currentIndex() == 0:
                password = self.Password.text()
                name = self.Name.text()
                surname = self.Surname.text()
                reg_date = self.Regdate.dateTime()
                reg_date = reg_date.toString("yyyy-MM-dd")
                email = self.Email.text()
                scursor.execute("UPDATE user SET password = %s, name = %s, surname = %s, reg_date = %s, email = %s WHERE username = (%s)", (password, name, surname, reg_date, email, username))
                mydb.commit()
                sistatikes = self.Recommendations.text()
                certificates = self.Certificates.text()
                scursor.execute("UPDATE candidate SET sistatikes = %s, certificates = %s WHERE username = (%s)", (sistatikes, certificates, username))
                mydb.commit()
            if self.Tabs.currentIndex() == 1:
                scursor.execute("""INSERT INTO applies (cand_usrname, job_id) values (%s, %s)""", (username, CID[self.CIDPos.currentIndex()]))
            CID.clear()
            self.CIDPos.clear()
            self.updateApps()
            mydb.commit()
        lock = False

    def resetAll(self):
        if userstate == 1:
            None
        elif userstate == 2:
            if self.Tabs.currentIndex() == 0:
                self.Password.setText(password)
                self.Name.setText(name)
                self.Surname.setText(surname)
                self.Regdate.setDateTime(reg_date)
                self.Email.setText(email)
            elif self.Tabs.currentIndex() == 1:
                self.JTitle.setText(title)
                self.JEdra.setText(edra)
                self.JSalary.setValue(salary)
                self.JSubdate.setDate(submission_date)
                self.JStartdate.setDate(start_date)
            elif self.Tabs.currentIndex() == 2:
                self.ETel.setValue(ftel)
                self.ERoad.setText(fstreet)
                self.ENum.setValue(fnum)
                self.ECity.setText(fcity)
                self.ECountry.setText(fcountry)
        elif userstate == 3:
            if self.Tabs.currentIndex() == 0:
                None

    def delete(self):
        global lock
        lock = True
        dcursor = mydb.cursor(buffered=True)
        dcursor.execute("set @curUser = (%s)", (username,))
        dcursor.execute("DELETE FROM applies WHERE job_id = (%s)", (CID[self.CIDPos.currentIndex()],))
        mydb.commit()
        CID.clear()
        self.CIDPos.clear()
        self.updateApps()
        lock = False

    def logOut(self):
        ui.setupLogin(MainWindow)
        JID.clear()
        CID.clear()

    def updateJobs(self):
        global JID
        Y = []
        jcursor = mydb.cursor(buffered=True)
        jcursor.execute("SELECT job.id FROM job INNER JOIN recruiter ON job.recruiter = recruiter.username INNER JOIN etaireia ON recruiter.firm = etaireia.AFM WHERE recruiter.firm = (SELECT firm FROM recruiter WHERE recruiter.username = (%s)) ORDER BY job.id", (username,))
        jids = jcursor.fetchall()
        for x in jids:
            x = functools.reduce(operator.add, (x))
            JID.append(x)
        jcursor.execute("SELECT job.position FROM job INNER JOIN recruiter ON job.recruiter = recruiter.username INNER JOIN etaireia ON recruiter.firm = etaireia.AFM WHERE recruiter.firm = (SELECT firm FROM recruiter WHERE recruiter.username = (%s)) ORDER BY job.id", (username,))
        jobs = jcursor.fetchall()
        for y in jobs:
            y = functools.reduce(operator.add, (y))
            Y.append(y)
        fulltitle = [str(x) + " - " +  y for x, y in zip(JID, Y)]
        self.JIDPos.addItems(fulltitle)
        self.JIDPos.addItem("Add new Job")
        jcursor.execute("SELECT id FROM job WHERE recruiter = (%s)", (username,))
        atts = jcursor.fetchone()
        jid = functools.reduce(operator.add, (atts))
        i = 0
        for x in JID:
            if jid == x:
                self.JIDPos.setCurrentIndex(i)
            i += 1
        self.updateJob()

    def updateJob(self):
        global title, announce_date, edra, salary, start_date, submission_date, antikeim, new
        mycursor = mydb.cursor(buffered=True)
        self.JAntikeim.clear()
        if self.JIDPos.currentIndex() == len(JID):
            new = 1
            self.JRecruiter.setText(name + " " + surname)
            self.JAnndate.setDateTime(QtCore.QDateTime.currentDateTime())
            self.JTitle.clear()
            self.JEdra.clear()
            self.JSalary.clear()
            self.JSubdate.clear()
            self.JStartdate.clear()
            self.J_state.setText("<html><head/><body><p>Stage: </span></p></body></html>")
            self.JTitle.setReadOnly(False)
            self.JEdra.setReadOnly(False)
            self.JSalary.setReadOnly(False)
            self.JSubdate.setReadOnly(False)
            self.JStartdate.setReadOnly(False)
            for x in range(self.JAntikeim.count()):
                self.JAntikeim.item(x).setFlags(QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled)
            i = 0
            mycursor.execute("SELECT title FROM antikeim ORDER BY title")
            atts = mycursor.fetchall()
            for x in atts:
                x = functools.reduce(operator.add, (x))
                self.JAntikeim.addItem(x)
                self.JAntikeim.item(i).setCheckState(0)
                i += 1
            
        elif self.JIDPos.currentIndex() < len(JID):
            new = 0
            cid = JID[self.JIDPos.currentIndex()]
            mycursor.execute("SELECT recruiter FROM job WHERE id = (%s)", (cid,))
            val = mycursor.fetchone()
            jrecruiter = functools.reduce(operator.add, (val))
            mycursor.execute("SELECT name, surname FROM user INNER JOIN recruiter ON user.username = recruiter.username INNER JOIN job ON recruiter.username = job.recruiter WHERE id = (%s)", (cid,))
            fullname = mycursor.fetchone()
            rname = fullname[0]
            rsname = fullname[1]
            self.JRecruiter.setText(rname + " " + rsname)
            mycursor.execute("SELECT position, announce_date, edra, salary, start_date, submission_date FROM job WHERE id = (%s)", (cid,))
            atts = mycursor.fetchone()

            title = atts[0]
            self.JTitle.setText(title)

            announce_date = atts[1]
            announce_date = announce_date.strftime("%d-%m-%Y %H:%M:%S")                         # date to string
            announce_date = QtCore.QDateTime.fromString(announce_date, "dd-MM-yyyy hh:mm:ss")   # string to QDate
            self.JAnndate.setDateTime(announce_date)

            edra = atts[2]
            self.JEdra.setText(edra)

            salary = atts[3]
            self.JSalary.setValue(salary)

            start_date = atts[4]
            start_date =  start_date.strftime("%d-%m-%Y")
            start_date = QtCore.QDate.fromString(start_date, "dd-MM-yyyy")
            self.JStartdate.setDate(start_date)

            submission_date = atts[5]
            submission_date = submission_date.strftime("%d-%m-%Y")
            submission_date = QtCore.QDate.fromString(submission_date, "dd-MM-yyyy")
            self.JSubdate.setDate(submission_date)
            if submission_date < QtCore.QDate.currentDate():
                self.J_state.setText("<html><head/><body><p>Stage: <span style=\" color:#ff0000;\">Closed</span></p></body></html>")
            else:
                self.J_state.setText("<html><head/><body><p>Stage: <span style=\" color:#00ff00;\">Open</span></p></body></html>")
                    
            mycursor.execute("SELECT title FROM antikeim ORDER BY title")
            atts = mycursor.fetchall()
            i = 0
            acursor = mydb.cursor()
            acursor.execute("SELECT antikeim_title FROM requires WHERE job_id = (%s)", (JID[self.JIDPos.currentIndex()],))
            chks = acursor.fetchall()
            for x in atts:
                x = functools.reduce(operator.add, (x))
                self.JAntikeim.addItem(x)
                self.JAntikeim.item(i).setCheckState(0)
                for y in chks:
                    y = functools.reduce(operator.add, (y))
                    if x == y:
                        self.JAntikeim.item(i).setCheckState(2)
                i += 1
            if jrecruiter != username:
                self.JTitle.setReadOnly(True)
                self.JEdra.setReadOnly(True)
                self.JSalary.setReadOnly(True)
                self.JSubdate.setReadOnly(True)
                self.JStartdate.setReadOnly(True)
                for x in range(self.JAntikeim.count()):
                    print(self.JAntikeim.item(x).text())
                    self.JAntikeim.item(x).setFlags(QtCore.Qt.ItemIsEnabled)
            else:
                self.JTitle.setReadOnly(False)
                self.JEdra.setReadOnly(False)
                self.JSalary.setReadOnly(False)
                self.JSubdate.setReadOnly(False)
                self.JStartdate.setReadOnly(False)
                for x in range(self.JAntikeim.count()):
                    self.JAntikeim.item(x).setFlags(QtCore.Qt.ItemIsUserCheckable|QtCore.Qt.ItemIsEnabled)
        else:
            sys.exit("ERROR")
    
    def updateApps(self):
        global CID
        Y = []
        ccursor = mydb.cursor(buffered=True)
        ccursor.execute("SELECT id FROM job ORDER BY id")
        cids = ccursor.fetchall()
        for x in cids:
            x = functools.reduce(operator.add, (x))
            CID.append(x)
        ccursor.execute("SELECT position FROM job ORDER BY id")
        jobs = ccursor.fetchall()
        for y in jobs:
            y = functools.reduce(operator.add, (y))
            Y.append(y)
        self.CIDPos.addItems(Y)
        self.updateApp()

    def updateApp(self):
        mycursor = mydb.cursor(buffered=True)
        self.CAntikeim.clear()
        cid = CID[self.CIDPos.currentIndex()]
        # mycursor.execute("SELECT recruiter FROM job WHERE id = (%s)", (cid,))
        # val = mycursor.fetchone()
        # crecruiter = functools.reduce(operator.add, (val))
        mycursor.execute("SELECT name, surname FROM user INNER JOIN recruiter ON user.username = recruiter.username INNER JOIN job ON recruiter.username = job.recruiter WHERE id = (%s)", (cid,))
        fullname = mycursor.fetchone()
        rname = fullname[0]
        rsname = fullname[1]
        self.CRecruiter.setText(rname + " " + rsname)
        mycursor.execute("SELECT position, edra, salary, start_date, submission_date FROM job WHERE id = (%s)", (cid,))
        atts = mycursor.fetchone()

        title = atts[0]
        self.CTitle.setText(title)

        edra = atts[1]
        self.CEdra.setText(edra)

        salary = atts[2]
        self.CSalary.setValue(salary)

        start_date = atts[3]
        start_date =  start_date.strftime("%d-%m-%Y")
        start_date = QtCore.QDate.fromString(start_date, "dd-MM-yyyy")
        self.CStartdate.setDate(start_date)

        submission_date = atts[4]
        submission_date = submission_date.strftime("%d-%m-%Y")
        submission_date = QtCore.QDate.fromString(submission_date, "dd-MM-yyyy")
        self.CSubdate.setDate(submission_date)

        # Candidate Folder

        mycursor.execute("SELECT antikeim_title FROM requires WHERE job_id = (%s) ORDER BY antikeim_title", (cid,))
        atts = mycursor.fetchall()
        i = 0
        for x in atts:
            x = functools.reduce(operator.add, (x))
            self.CAntikeim.addItem(x)
            self.CAntikeim.item(i).setFlags(QtCore.Qt.ItemIsEnabled)
            i += 1

        if mycursor.execute("SELECT EXISTS (SELECT job_id FROM applies WHERE cand_usrname = (%s))", (username,)):
            mycursor.execute("SELECT job_id FROM applies WHERE cand_usrname = (%s)", (username,))
            buts = functools.reduce(operator.add, mycursor.fetchall())
            for x in buts:
                if x == CID[self.CIDPos.currentIndex()]:
                    print("hello!")
                    self.Save.setEnabled(False)
                    self.DeleteApp.setEnabled(True)
                    break
                else:
                    print("niggabitch!!!")
                    self.Save.setEnabled(True)
                    self.DeleteApp.setEnabled(False)
            self.saveButton()

        if submission_date < QtCore.QDate.currentDate():

            # Under assesment/Rating

            self.C_state.setText("<html><head/><body><p>Stage: <span style=\" color:#ff0000;\">Closed</span></p></body></html>")
        else:
            self.C_state.setText("<html><head/><body><p>Stage: <span style=\" color:#ff00ff;\">Open</span></p></body></html>")

    def saveButton(self):
        if userstate == 3:
            if self.Tabs.currentIndex() == 1:
                self.Save.setText("Apply")
            else:
                self.Save.setText("Save")
                self.Save.setEnabled(True)
        else:
                self.Save.setText("Save")
                self.Save.setEnabled(True)

    def updateFirm(self):
        global fname, fafm, fdoy, ftel, fstreet, fnum, fcity, fcountry
        fcursor = mydb.cursor(buffered=True)
        fcursor.execute("SELECT name, AFM, DOY, tel, street, num, city, country FROM etaireia INNER JOIN recruiter ON etaireia.AFM = recruiter.firm WHERE recruiter.username = (%s)", (username,))
        etaireia = fcursor.fetchone()
        fname = etaireia[0]
        self.EName.setText(fname)
        fafm = etaireia[1]
        self.EAFM.setValue(int(fafm))
        fdoy = etaireia[2]
        self.EDoy.setText(fdoy)
        ftel = etaireia[3]
        self.ETel.setValue(ftel)
        fstreet = etaireia[4]
        self.ERoad.setText(fstreet)
        fnum = etaireia[5]
        self.ENum.setValue(fnum)
        fcity = etaireia[6]
        self.ECity.setText(fcity)
        fcountry = etaireia[7]
        self.ECountry.setText(fcountry)

    def Buttons(self):
        if self.Tabs.currentIndex() == 2:
            self.Save.setEnabled(False)
            self.Reset.setEnabled(False)
        else:
            self.Save.setEnabled(True)
            self.Reset.setEnabled(True)

    def updateRC(self):
        global FID
        if self.RCChoose.currentIndex() == 0:
            self.stackedRC.setCurrentIndex(1)
            rccursor = mydb.cursor()
            rccursor.execute("SELECT name FROM etaireia ORDER BY name")
            atts = rccursor.fetchall()
            for x in atts:
                x = functools.reduce(operator.add, (x))
                self.RFirm.addItem(x)
            rccursor.execute("SELECT AFM FROM etaireia ORDER BY name")
            FID = rccursor.fetchall()
        elif self.RCChoose.currentIndex() == 1:
            self.stackedRC.setCurrentIndex(2)

    def updateFS(self):
        if root == False:
            self.FSBelongs.clear()
            fscursor = mydb.cursor()
            if self.FSCHoose.currentIndex() == 0:
                fscursor.execute("SELECT title FROM field ORDER BY title")
                atts = fscursor.fetchall()
                for x in atts:
                    x = functools.reduce(operator.add, (x))
                    self.FSBelongs.addItem(x)
            elif self.FSCHoose.currentIndex() == 1:
                fscursor.execute("SELECT title FROM antikeim ORDER BY title")
                atts = fscursor.fetchall()
                for x in atts:
                    x = functools.reduce(operator.add, (x))
                    self.FSBelongs.addItem(x)

    def checkRoot(self):
        global root
        if self.FSRootcheck.checkState() == 2:
            root = True
            self.FSBelongs.clear()
            self.FSBelongs.setEnabled(False)
        elif self.FSRootcheck.checkState() == 0:
            root = False
            self.FSBelongs.setEnabled(True)
            self.updateFS()

    def updateHistoryOrder(self):
        hcursor = mydb.cursor()
        self.HOrder2.clear()
        if self.HOrder.currentIndex() == 0:
            self.HOrder2.addItem("Candidate")
            self.HOrder2.addItem("Recruiter")
            self.HOrder2.addItem("User")
            self.HOrder2.addItem("Etaireia")
            self.HOrder2.addItem("Job")
        elif self.HOrder.currentIndex() == 1:
            hcursor.execute("SELECT username FROM user ORDER BY username")
            atts = hcursor.fetchall()
            for x in atts:
                x = functools.reduce(operator.add, (x))
                self.HOrder2.addItem(x)

    def updateHistory(self):
        Row = []
        self.HResults.setRowCount(0)
        hcursor = mydb.cursor()
        if self.HOrder.currentIndex() == 0:
            hcursor.execute("SELECT * FROM history WHERE table_name = (%s) ORDER BY user", (self.HOrder2.currentText(),))
            atts = hcursor.fetchall()
            c = 0
            if atts != 'NULL':
                for x in atts:
                    self.HResults.insertRow(c)
                    for i in range(5):
                        cell = QtWidgets.QTableWidgetItem(str(x[i]))
                        self.HResults.setItem(c, i, cell)
                    c += 1
        if self.HOrder.currentIndex() == 1:
            hcursor.execute("SELECT * FROM history WHERE user = (%s) ORDER BY table_name", (self.HOrder2.currentText(),))
            atts = hcursor.fetchall()
            c = 0
            if atts != 'NULL':
                for x in atts:
                    self.HResults.insertRow(c)
                    for i in range(5):
                        cell = QtWidgets.QTableWidgetItem(str(x[i]))
                        self.HResults.setItem(c, i, cell)
                    c += 1

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    MainWindow = QtWidgets.QMainWindow()
    ui = mainWindow()
    ui.setupLogin(MainWindow)
    MainWindow.show()
    sys.exit(app.exec_())